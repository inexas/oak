Dialect {
	key: OakTest;
	
	Object [{
		/**
		 * Dialect is the root object.
		 */
		key: Dialect;
		class: "com.inexas.oak.template.Dialect";
		root;
		
		Member [{ // The list of membership rules
			Property { key: key; type: identifier; }
		}, {
			key: Object;
			cardinality: 1..*;
			collection: map;
		}, {
			/**
			 * KW: After trying visitors I don't like the idea too much because
			 * there are lots of little problems. For example ActionDefs don't
			 * get visited but the modifiers do. Similarly the visitor can't be
			 * initialized properly.
			 */
			Property { key: visitor; }
			cardinality: 0..*;
		}]
		
	}, {
		/**
		 * Object
		 */
		key: Object;
		class: "com.inexas.oak.template.Objet";
		
		Member [{
			Property { key: key; type: identifier; }
		}, {
			Property { key: class; type: identifier; }
		}, {
			/**
			 * The 'root' property tells Oak that this Object can be at
			 * the root. Default is false.
			 */
			Property { key: root; type: boolean; }
			cardinality: 0..1;
		}, {
			key: Member;
			cardinality: 1..*;
		}]
		
	}, {
		/**
		 * Define a Member as a key, cardinality and optional collection type
		 */
		key: Member;
		class: "com.inexas.oak.template.Member";
		
		Member [{
			// Either a key of an Object...
			Property { key: key; type: identifier; }
			cardinality: 0..1;
		}, {
			// ..or an in-line property
			// Can't enforce 'OR' here so it's done in 
			// Member.java
			key: Property;
			cardinality: 0..1;
		}, {
			Property { key: cardinality; type: cardinality; }
			// Default is 1..1 for Property, 0..* for Objects 
			cardinality: 0..1;
		}, {
			/**
			 * Default 'list' for cardinalities that require it
			 */ 
			Property {
				key: collection;
				type: identifier;
				Constraint {
					type: choice;
					value [ list, map, set ]
				}
			}
			cardinality: 0..1;
		}]
	}]
		
	Object {
		key: Property;
		class: "com.inexas.oak.template.Property";
		
		Member [{
			Property { key: key; type: identifier; }
		}, {
			/** Data type, default 'text'. */
			Property {
				key: type;
				type: identifier;
				Constraint {
					type: choice;
					value [
						text,		identifier,		path,		
						boolean,		
						integer,	INTEGER,		decimal,		DECIMAL,	
						cardinality,
						date,		time,			datetime,	
						any		
					]
				}
			}
			cardinality: 0..1;
		}, {
			key: Constraint;
		}]
	}

	Object {
		key: Constraint;
		class: "com.inexas.oak.template.Constraint";
		
		Member [{
			Property {
				key: type;
				type: identifier;
				Constraint {
					type: choice;
					value [ choice, regexp ]
				}
			}
		}, {
			Property { key: value; type: any; }
			cardinality: 0..*;
		}]
	}
}